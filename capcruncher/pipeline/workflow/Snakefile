import os
import sys
import pathlib
import shutil
import json

import pandas as pd
import pyranges as pr
import snakemake.utils
import capcruncher.pipeline.utils

snakemake.utils.min_version('7.19.1')


configfile: "config.yml"


# Pipeline set-up
capcruncher.pipeline.utils.format_config_dict(config)

## Get fastq files
FASTQ_SAMPLES = capcruncher.pipeline.utils.FastqSamples.from_files(
    list(pathlib.Path(".").glob("*.fastq*"))
)

## Convert FASTQ files to design matrix
if os.path.exists(config["analysis"].get("design", None)):
    DESIGN = pd.read_table(
        config["analysis"]["design"], sep=r"\s+|,|\t", engine="python"
    )
else:
    DESIGN = FASTQ_SAMPLES.design

## Read viewpoints
VIEWPOINTS = config["analysis"]["viewpoints"]
VIEWPOINT_NAMES = pd.read_table(
    VIEWPOINTS, names=["chrom", "start", "end", "name"], header=None
)["name"].to_list()


N_SAMPLES = DESIGN["sample"].nunique()
ANALYSIS_METHOD = config["analysis"].get("method", "capture")
BIN_SIZES = capcruncher.pipeline.utils.get_bin_sizes(config)
HIGH_NUMBER_OF_VIEWPOINTS = capcruncher.pipeline.utils.has_high_viewpoint_number(
    VIEWPOINTS, config
)

## Optional
FASTQ_DEDUPLICATE = config["deduplication"].get("pre-dedup", False)
AGGREGATE_SAMPLES = DESIGN["sample"].nunique() > 1
COMPARE_SAMPLES = DESIGN["condition"].nunique() > 1

PERFORM_PLOTTING = capcruncher.pipeline.utils.can_perform_plotting(config)
PERFORM_BINNING = capcruncher.pipeline.utils.can_perform_binning(config)

## Pipeline variables
SAMPLE_NAMES = FASTQ_SAMPLES.sample_names_all


include: "rules/digest.smk"
include: "rules/fastq.smk"
include: "rules/qc.smk"
include: "rules/align.smk"
include: "rules/annotate.smk"
include: "rules/filter.smk"
include: "rules/pileup.smk"
include: "rules/compare.smk"
include: "rules/statistics.smk"
include: "rules/visualise.smk"


rule all:
    input:
        qc=rules.multiqc.output[0],
        report="capcruncher_output/statistics/capcruncher_report.html",
        bigwigs=expand(
            "capcruncher_output/pileups/bigwigs/{sample}/{norm}/{sample}_{viewpoint}.bigWig",
            sample=SAMPLE_NAMES,
            norm=["raw", "norm"],
            viewpoint=VIEWPOINT_NAMES,
        ),
        bigwigs_summary=expand(
            "capcruncher_output/comparisons/bigwigs/{group}/{group}.{method}-summary.{viewpoint}.bigWig",
            group=DESIGN["condition"].unique(),
            method=get_summary_methods(),
        )
        if AGGREGATE_SAMPLES
        else [],
        bigwigs_comparison=expand(
            "capcruncher_output/comparisons/bigwigs/{comparison}/{comparison}.{method}-subtraction.{viewpoint}.bigWig",
            comparison=[
            f"{a}-{b}"
                for a, b in itertools.permutations(DESIGN["condition"].unique(), 2)
            ],
            method=get_summary_methods(),
        )
        if COMPARE_SAMPLES
        else [],
        hub=rules.create_ucsc_hub.output[0],


onerror:
    log_out = "capcruncher_error.log"
    shutil.copyfile(log, log_out)
    print(
        f"An error occurred. Please check the log file {log_out} for more information."
    )
