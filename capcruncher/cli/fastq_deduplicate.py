#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct  4 13:47:20 2019
@author: asmith
"""
import os
from typing import List, Tuple, Union

import numpy as np
from capcruncher import libcapcruncher
from capcruncher.tools.statistics import DeduplicationStatistics


def parse(input_files: Tuple, output: os.PathLike = "out.bincode", read_buffer: int = 1e5):
    """
    Parses fastq file(s) into easy to deduplicate format.

    This command parses one or more fastq files and generates a dictionary containing
    hashed read identifiers together with hashed concatenated sequences. The hash dictionary
    is output in json format and the identify subcommand can be used to determine which read identifiers
    have duplicate sequences.

    \f
    Args:
     input_files (Tuple): One or more fastq files to process
     output (os.PathLike, optional): Output for parsed read identifiers and sequences. Defaults to "out.json".
     read_buffer (int, optional): Number of reads to process before outputting to file. Defaults to 1e5.
    """

    libcapcruncher.fastq_parse(input_files, output)


def identify(input_files: Tuple, output: os.PathLike = "duplicates.json"):
    """
    Identifies fragments with duplicated sequences.

    Merges the hashed dictionaries (in json format) generated by the "parse" subcommand and
    identifies read with exactly the same sequence (share an identical hash). Duplicated read
    identifiers (hashed) are output in json format. The "remove" subcommand uses this dictionary
    to remove duplicates from fastq files.


    \f
    Args:
     input_files (Tuple): Paths to json files containing dictionaries with hashed read ids as the keys
                          and hashed sequences as the values.
     output (os.PathLike, optional): Duplicate read ids identified. Defaults to "duplicates.json".
    """

    libcapcruncher.fastq_find_duplicates(input_files, output)


def remove(
    input_files: Tuple,
    duplicated_ids: os.PathLike,
    read_buffer: int = 1e5,
    output_prefix: os.PathLike = "",
    gzip: bool = False,
    compression_level: int = 5,
    sample_name: str = "",
    stats_prefix: os.PathLike = "",
):
    """
    Removes fragments with duplicated sequences from fastq files.

    Parses input fastq files and removes any duplicates from the fastq file(s) that are
    present in the json file supplied. This json dictionary should be produced by the
    "identify" subcommand.

    Statistics for the number of duplicated and unique reads are also provided.

    \f
    Args:
     input_files (Tuple): Input fastq files (in the same order as used for the parse command).
     duplicated_ids (os.PathLike): Duplicated read ids from identify command (hashed and in json format).
     read_buffer (int, optional): Number of reads to process before writing to file. Defaults to 1e5.
     output_prefix (os.PathLike, optional): Deduplicated fastq output prefix. Defaults to "".
     gzip (bool, optional): Determines if output is gzip compressed using pigz. Defaults to False.
     compression_level (int, optional): Level of compression if required (1-9). Defaults to 5.
     sample_name (str, optional): Name of sample processed e.g. DOX-treated_1. Defaults to "".
     stats_prefix (os.PathLike, optional): Output prefix for statistics. Defaults to "".

    """

    output_files = [f"{output_prefix}_{i+1}.fastq" for i in range(len(input_files))]

    stats = libcapcruncher.fastq_remove_duplicates(
        input_files, duplicated_ids, output_files
    )
    deduplication_stats = DeduplicationStatistics(
        sample=sample_name,
        read_type="pe",
        reads_total=stats["total"],
        reads_unique=stats["unique"],
    )

    deduplication_stats.df.to_csv(f"{stats_prefix}.deduplication.csv", index=False)
